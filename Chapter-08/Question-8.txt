Chapter : 8 - item : 1 - ถั่ววิเศษ
กฤษฎาได้ค้นพบเม็ดถั่ววิเศษที่เมื่อโยนลงดินแล้วถั่วจะสามารถเติบโตขึ้นและกลายเป็น Binary Search Tree (BST) ได้ 
โดยงานของนักศึกษาก็คือนักศึกษาจะต้องสร้าง BST ตามลำดับของข้อมูลนำเข้าซึ่งเป็นตัวเลขจำนวนเต็มที่ไม่ซ้ำกันเลย 
โดยในการใส่ค่าในแต่ละครั้งจะกลับมาที่ Root of BST เสมอ  แล้วท่องต้นไม้ไปทางซ้ายด้วยคำสั่ง "L" 
หรือท่องต้นไม้ไปทางขวาด้วยคำสั่ง "R" จนกว่าจะถึงตำแหน่งที่เหมาะสมที่จะใส่ข้อมูลแล้วจึงพิมพ์ "*" 
เพื่อใส่ข้อมูลลงไปในต้นไม้  จงเขียนโปรแกรมเพื่อแสดงคำสั่งการท่องต้นไม้ในการใส่ข้อมูลทีละค่าตามลำดับของข้อมูลนำเข้า

Enter Input : 1 2 5 4 3 -2 -1
*
R*
RR*
RRL*
RRLL*
L*
LR*


Enter Input : 48 47 194194 3534 39 20 2014 35289 53
*
L*
R*
RL*
LL*
LLL*
RLL*
RLR*
RLLL*


Chapter : 8 - item : 2 - Closest Value
จงเขียนฟังก์ชั่นสำหรับการ insert แบบ Binary Search Tree (BST) 
โดยที่ input ตัวแรกจะเป็น root เสมอและจงเขียนฟังก์ชั่นสำหรับการหาค่า
ที่ใกล้เคียง input ที่รับเข้ามาที่สุดที่อยู่ใน BST ที่ทำการ insert ครบแล้ว

รูปแบบการรับ input จะแบ่งโดย '/'

1.ชุดของ BST ที่จะทำการ insert โดยตัวแรกจะเป็น root เสมอ

2.ค่าที่จะนำมาเปรียบเทียบกับค่าใน BST ที่ทำการ insert แล้ว

รูปแบบ output 

จะ printTree ทุกครั้งที่มีการ insert ค่าเข้าและเมื่อทำการ insert 
จบจะเรียกใช้ฟังก์ชั่น closestValue(root,value) และแสดงค่าที่
ใกล้เคียงที่สุดจาก BST 

*** ถ้าหากค่าที่รับเข้ามาเทียบมีอยู่ใน BST ให้ return ค่านั้นออกมาได้เลย 
และหากมีค่าที่อยู่ใกล้มากกว่า 1 จำนวนให้แสดงจำนวนที่มากที่สุดที่อยู่ใกล้ค่านั้น ***

Enter Input : 1 2 5 4 3 -2 -1/0
 1
--------------------------------------------------
      2
 1
--------------------------------------------------
           5
      2
 1
--------------------------------------------------
           5
                4
      2
 1
--------------------------------------------------
           5
                4
                     3
      2
 1
--------------------------------------------------
           5
                4
                     3
      2
 1
      -2
--------------------------------------------------
           5
                4
                     3
      2
 1
           -1
      -2
--------------------------------------------------
Closest value of 0 : 1


Enter Input : 2 5 1 -7 -5 6 9 12 0 -4/4
 2
--------------------------------------------------
      5
 2
--------------------------------------------------
      5
 2
      1
--------------------------------------------------
      5
 2
      1
           -7
--------------------------------------------------
      5
 2
      1
                -5
           -7
--------------------------------------------------
           6
      5
 2
      1
                -5
           -7
--------------------------------------------------
                9
           6
      5
 2
      1
                -5
           -7
--------------------------------------------------
                     12
                9
           6
      5
 2
      1
                -5
           -7
--------------------------------------------------
                     12
                9
           6
      5
 2
      1
                     0
                -5
           -7
--------------------------------------------------
                     12
                9
           6
      5
 2
      1
                     0
                          -4
                -5
           -7
--------------------------------------------------
Closest value of 4 : 5

Enter Input : 2 5 1 -7 -5 6 9 12 0 -4/-4
 2
--------------------------------------------------
      5
 2
--------------------------------------------------
      5
 2
      1
--------------------------------------------------
      5
 2
      1
           -7
--------------------------------------------------
      5
 2
      1
                -5
           -7
--------------------------------------------------
           6
      5
 2
      1
                -5
           -7
--------------------------------------------------
                9
           6
      5
 2
      1
                -5
           -7
--------------------------------------------------
                     12
                9
           6
      5
 2
      1
                -5
           -7
--------------------------------------------------
                     12
                9
           6
      5
 2
      1
                     0
                -5
           -7
--------------------------------------------------
                     12
                9
           6
      5
 2
      1
                     0
                          -4
                -5
           -7
--------------------------------------------------
Closest value of -4 : -4



Chapter : 8 - item : 3 - Ranking

จงเขียนฟังก์ชั่นในการหา Rank ของ input ที่รับเข้ามา 
โดย Rank คือการแบ่งเป็นชั้นๆตามข้อมูลของ BST โดยจะ
เริ่มจากค่าที่น้อยกว่าค่าใน BST ที่น้อยที่สุดจะมีค่า Rank = 0 
และค่าที่อยู่ตั้งแต่ค่าที่น้อยที่สุดจนถึงตัวถัดไปจะมีค่า Rank +=1 
ไปเรื่อยๆจนถึงชั้นของตัวสุดท้ายหรือตัวมากสุด เช่น

จากรูป ค่าที่น้อยที่สุดคือ -2 ดังนั้น rank(-2) จะได้ 1 แต่ rank 
ของค่าที่น้อยกว่า -2 จะเท่ากับ 0

และ rank(0) จะเท่ากับ 1 ส่วน rank(1) จะเท่ากับ 2 เป็นต้น


Enter Input : 1 2 5 4 3 -2/4
           5
                4
                     3
      2
 1
      -2
--------------------------------------------------
Rank of 4 : 5

Enter Input : 7 4 3 1 2 6 9 12 5 11/10
           12
                11
      9
 7
           6
                5
      4
           3
                     2
                1
--------------------------------------------------
Rank of 10 : 8


Enter Input : 7 4 2 1 9 8 11/5
           11
      9
           8
 7
      4
           2
                1
--------------------------------------------------
Rank of 5 : 3


Enter Input : 1 2 4 9 8 5 3/0
                9
                     8
                          5
           4
                3
      2
 1
--------------------------------------------------
Rank of 0 : 0


Enter Input : 1 2 4 9 8 5 3/10
                9
                     8
                          5
           4
                3
      2
 1
--------------------------------------------------
Rank of 10 : 7


Chapter : 8 - item : 4 - Mondstadt
Jean รักษาการผู้บัญชาการของกองอัศวิน Favonius แห่ง Mondstadt 
ต้องการทราบถึงขุมพลังของอัศวินในแต่ละกลุ่มภายในเมือง Mondstadt 
แห่งนี้จึงจะทดสอบความแข็งแกร่งของขุมกำลังที่มี โดยจะทำการจัดวางกำลัง
อัศวินภายในเมือง Mondstadt ดังตัวอย่างต่อไปนี้
                พลัง    :   5  4  4  3  2  2  2
                ลำดับ  :   0  1  2  3  4  5  6
จากข้อมูลข้างต้นประกอบด้วยอัศวินทั้งหมด 7 คน เรียงตามลำดับตั้งแต่
ลำดับที่ 0 ถึง 6 และพลังของอัศวินแต่ละคนมีข้อกำหนดดังนี้
    -  อัศวินลำดับที่ n จะมีลูกน้องในสังกัดอยู่ลำดับที่ 2n+1 และ 2n+2 
    (ลูกน้องของลูกน้องของอัศวินลำดับที่ n ถือว่าเป็นลูกน้องของอัศวินลำดับที่ n ด้วย)
    -  ค่าพลังของอัศวินมีค่าตั้งแต่ 0 - 5
    -  กลุ่มของอัศวินกลุ่มที่ i จะมีสมาชิกคือ อัศวินลำดับที่ i และลูกน้อง
    ของอัศวินลำดับที่ i (รวมลูกน้องของลูกน้องของอัศวินด้วย)
    -  พลังของกลุ่มอัศวินลำดับที่ i เป็นพลังรวมของสมาชิกของอัศวิน
    ทั้งหมดในกลุ่ม เช่น
          -  อัศวินกลุ่มที่ 1 หมายถึง กลุ่มของอัศวินลำดับที่ 1 
          ซึ่งมีสมาชิกประกอบด้วย อัศวินลำดับที่ 1, 3 และ 4 
          และค่าพลังรวมของอัศวินกลุ่มที่ 1 เท่ากับ 4 + 3 + 2 = 9
          -  อัศวินกลุ่มที่ 2 หมายถึง กลุ่มของอัศวินลำดับที่ 2 
          ซึ่งมีสมาชิกประกอบด้วย อัศวินลำดับที่ 2 , 5 และ 6 
          และค่าพลังรวมของอัศวินกลุ่มที่ 2 เท่ากับ 4 + 2 + 2 = 8

ดังนั้นเมื่อนำพลังของอัศวินกลุ่มที่ 1 และ 2 มาเทียบกัน จะได้ว่าพลังรวม
ของอัศวินกลุ่มที่ 1 นั้นมากกว่าพลังรวมของอัศวินกลุ่มที่ 2
Jean ต้องการทราบว่าค่าพลังรวมของอัศวินภายในเมือง Mondstadt เป็นเท่าใด 
และถ้าเปรียบเทียบระหว่างอัศวินแต่ละกลุ่มแล้วค่าของพลังรวมของอัศวินในกลุ่มใด
มีค่ามากกว่ากัน

Enter Input : 5 4 4 3 2 2 2/1 2,5 6,2 0
22
1>2
5=6
2<0

Enter Input : 4 5/0 1,1 0
9
0>1
1<0

Chapter : 8 - item : 5 - จองรถตู้
บริษัทแห่งหนึ่งมีรถตู้ K คันที่ลูกค้าสามารถเช่าไปใช้งานได้ 
โดยรถตู้แต่ละคันมีรหัสประจำตัวรถเป็นหมายเลขจำนวนเต็มบวกตั้งแต่ 
1 จนถึง K ข้อกำหนดในการเลือกรถตู้ให้ลูกค้ามีอยู่ว่า ลูกค้าจะต้อง
ทำการจองรถตู้ก่อน โดยคำสั่งจองจะต้องระบุจำนวนวันที่จะใช้ 
จากนั้นผู้จองจะได้รถตู้ที่ว่างให้ใช้เร็วที่สุดเท่าที่จะหาได้จากรถตู้ทั้งหมด

ในกรณีที่มีรถตู้ว่างให้ใช้เร็วที่สุดมากกว่า 1 คัน คันที่มีรหัสประจำรถ
น้อยกว่าจะถูกเลือกก่อน เช่นถ้าหากมีรถตู้ที่ว่างให้ใช้เร็วที่สุด 3 คัน  
ซึ่งมีรหัสประจำรถเป็น 5 , 7 และ 20 รถตู้ที่มีหมายเลข 5 จะถูกเลือกก่อน 
นอกจากนี้การจองจะให้ความสำคัญกับคำสั่งจองที่มาก่อนเสมอ 
สำหรับการจองแต่ละครั้ง ผู้จองจะได้รับคำตอบกลับมาว่าได้ใช้รถตู้หมายเลขใด  
โดยในตอนแรกรถตู้ทุกคันจะว่างและพร้อมใช้งานทั้งหมด

อธิบาย Input โดย Input จะแบ่งเป็น 2 ฝั่งด้วย /
-  ฝั่งซ้ายเป็น K ซึ่งหมายถึงเลขประจำตัวรถ โดยเริ่มตั้งแต่ 1 ถึง K
-  ฝั่งขวาเป็น List จำนวนวันที่จองรถตู้ของลูกค้าที่สั่งจองเข้ามา

คำใบ้ :  Min Heap

Enter Input : 3/3 1 2 2 2 1
Customer 1 Booking Van 1 | 3 day(s)
Customer 2 Booking Van 2 | 1 day(s)
Customer 3 Booking Van 3 | 2 day(s)
Customer 4 Booking Van 2 | 2 day(s)
Customer 5 Booking Van 3 | 2 day(s)
Customer 6 Booking Van 1 | 1 day(s)

Enter Input : 5/1 1 1 1 1 1 1 1 1
Customer 1 Booking Van 1 | 1 day(s)
Customer 2 Booking Van 2 | 1 day(s)
Customer 3 Booking Van 3 | 1 day(s)
Customer 4 Booking Van 4 | 1 day(s)
Customer 5 Booking Van 5 | 1 day(s)
Customer 6 Booking Van 1 | 1 day(s)
Customer 7 Booking Van 2 | 1 day(s)
Customer 8 Booking Van 3 | 1 day(s)
Customer 9 Booking Van 4 | 1 day(s)
